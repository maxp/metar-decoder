// Generated by CoffeeScript 1.4.0
(function() {
  var decode_tok, int, moment, x;

  x = typeof exports !== "undefined" && exports !== null ? exports : this;

  moment = require('moment');

  x.decode = function(s) {
    var ct, icao, res, t, tokens;
    s = s.replace(/\n/g, " ");
    t = s.indexOf("=");
    if (t > -1) {
      s = s.substr(0, t);
    }
    tokens = s.split(" ");
    if (tokens[tokens.length - 1] === "") {
      tokens.pop();
    }
    if (tokens.length < 5) {
      return {
        err: "no_data"
      };
    }
    ct = 0;
    if (/^\d\d\d\d\/\d\d\/\d\d/.test(tokens[ct])) {
      ct += 1;
    }
    if (/^\d\d:\d\d/.test(tokens[ct])) {
      ct += 1;
    }
    if (tokens[ct] === "METAR") {
      ct += 1;
    }
    if (tokens[ct] === "SPECI") {
      ct += 1;
    }
    console.log(ct, tokens);
    icao = tokens[ct];
    if (icao.length !== 4) {
      return {
        err: "bad icao"
      };
    } else {
      ct += 1;
    }
    res = {
      icao: icao
    };
    t = tokens[ct].match(/^(\d\d)(\d\d)(\d\d)Z$/);
    if (!t) {
      res.err = "invalid time";
      return res;
    }
    res.ts = moment.utc().date(t[1]).hours(t[2]).minutes(t[3]).toDate();
    ct += 1;
    if (tokens[ct] === "AUTO") {
      ct += 1;
    }
    if (tokens[ct] === "COR") {
      ct += 1;
    }
    res.unk = [];
    while (ct < tokens.length) {
      decode_tok(tokens[ct], res);
      ct += 1;
    }
    if (res.unk.length === 0) {
      delete res.unk;
    }
    return res;
  };

  int = function(s) {
    return parseInt(s, 10);
  };

  decode_tok = function(tok, res) {
    var t;
    t = tok.match(/^(\d{3}|VRB)(\d{2,3})(G\d{2,3})?(KT|MPS|KMH)$/);
    if (t) {
      if (t[4] !== "MPS") {
        res.unk.push(tok);
        return;
      }
      res.b = t[1] === "VRB" ? 360 : int(t[1]);
      res.w = int(t[2]);
      if (t[3]) {
        res.g = int(t[3].substring(1));
      }
      return;
    }
    t = tok.match(/^Q(\d{3,4})$/);
    if (t) {
      res.q = int(t[1]);
      return;
    }
    t = tok.match(/^(\d\d\d\d)$/);
    if (t) {
      res.v = int(t[1]);
      return;
    }
    if (tok === "CAVOK" || tok === "SKC") {
      res.c = 0;
      res.v = 9999;
      return;
    }
    if (tok === "NOSIG") {
      return;
    }
    t = tok.match(/^(M?\d\d)\/(M?\d\d)$/);
    if (t) {
      res.t = t[1].charAt(0) === 'M' ? -int(t[1].substring(1)) : int(t[1]);
      res.d = t[2].charAt(0) === 'M' ? -int(t[2].substring(1)) : int(t[2]);
      return;
    }
    if (tok === "RMK") {
      return "RMK";
    }
    t = tok.match(/^QFE(\d\d\d)\/(\d\d\d\d)$/);
    if (t) {
      res.p = int(t[2]);
      return;
    }
    res.unk.push(tok);
  };

}).call(this);
